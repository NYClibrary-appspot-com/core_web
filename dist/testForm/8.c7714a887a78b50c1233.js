(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{"1ljd":function(t,e){t.exports=".mat-card {\n    max-width: 800px;\n    margin: auto;\n    padding: 0px;\n    height: 100%;\n    background: rgba(214, 212, 212, 0.048);\n    border: .4px solid rgb(59, 59, 59);\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n\n.mat-card-header {\n   \n    font-weight: bold;\n    display: inline;\n    \n}\n\n.mat-card-title  {\n    margin-left: -16.5px;\n    margin-right: -16px;\n    margin-top: -.5px;\n    color: rgba(0, 0, 0, 0.836);\n    background: rgba(34, 34, 34, 0.13);\n    padding: 5px;\n}\n\n.mat-card-content {\n    margin: 0px;\n}\n\n.mat-card>.mat-card-actions:last-child {\n    margin-bottom: 5px;\n   \n}\n\n.mat-card-actions .mat-button, .mat-card-actions .mat-raised-button{\n    margin: 0px;\n    margin-left: 22px;\n}\n\n.mat-expansion-panel {\n    background: rgba(255, 254, 254, 0.151);\n}\n\n.requirements {\n    margin-left: 30px;\n    margin-right: 30px;\n    \n}\n\n.pull-right {\n    display:flex;\n    margin-left:auto; \n    margin-right:0;\n}\n\n.center {\n    display:flex;\n    margin:auto;\n    margin-top:10px;\n}\n\n.pull-left {\n    display:flex;\n    margin-left:0; \n    margin-right:auto;\n}\n\n.content .description{\n    font-size: 20px;\n    margin-left: 30px;\n    margin-right: 30px;\n    margin-bottom: 10px;\n}\n\n.content .date,.location,.duration{\n    margin-left: 40px;\n    margin-right: 40px;\n}\n\n.table{\n    width: 100%;\n    height: 100%;\n    overflow-x:  auto;\n    overflow-y:  auto;\n}\n\n.mat-card {\n    font-family: Georgia, 'Times New Roman', Times, serif;\n}\n\n\n\n\n"},"LP+A":function(t,e){t.exports='<mat-card>\n  <mat-card-header >\n\n   \n      <mat-card-title> \n          <mat-panel-title>\n              <span class = "center" >{{collabData?.title}}</span>\n          </mat-panel-title>\n          <mat-panel-description>\n              <span class = "pull-right" ><mat-icon>group</mat-icon> : {{collabData?.members.length}} / {{ collabData?.size}}</span>\n          </mat-panel-description>\n      </mat-card-title>\n\n  </mat-card-header>\n  <mat-card-content>\n    <mat-accordion>\n        <div class = "content">\n            <p class="description">{{ collabData?.description }} </p>\n            <p class="date">Date: {{ collabData?.date | date:\'medium\' }}</p>\n            <p class="duration">Apply By: {{ collabData?.duration | date:\'medium\' }}</p>\n            <p class="location">Location: {{ collabData?.location }}</p>\n            <mat-divider></mat-divider><br />\n            <div class = "requirements">\n                <mat-chip-list>\n                    Classes: \n                    <mat-chip *ngFor = "let class of collabData?.classes">\n                      {{ class }}\n                    </mat-chip>\n                </mat-chip-list>\n                <br>\n                <mat-chip-list>\n                    Skills: \n                    <mat-chip *ngFor="let skill of collabData?.skills">\n                      {{ skill }}\n                    </mat-chip>\n                </mat-chip-list>\n            </div>\n      \n        </div>\n        <br>\n        \n        \x3c!-- Event Binding: In this case the event is (opened) --\x3e\n        <mat-expansion-panel \n                       (opened)="panelWasOpen1()"\n                       (closed)="panelOpenState1 = false">\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n              <h4>Members</h4>\n          </mat-panel-title>\n          <mat-panel-description>\n          </mat-panel-description>\n          </mat-expansion-panel-header>\n\n            <ng-container class="table-container">\n              <div class="table">\n                <collab-table [table] = "table" [xAxisReq] = "xAxisReq"></collab-table>\n              </div>\n            </ng-container>\n          \n          \n        </mat-expansion-panel>\n    </mat-accordion>\n    \n  </mat-card-content>\n\n  <mat-expansion-panel \n                       (opened)="panelWasOpen2()"\n                       (closed)="panelOpenState2 = false">\n        <mat-expansion-panel-header>\n          <mat-panel-title>\n            <h4>Actions</h4>\n          </mat-panel-title>\n          <mat-panel-description>\n          </mat-panel-description>\n          </mat-expansion-panel-header>\n            <mat-card-actions>\n              <button *ngIf="checkPartOf() == false" mat-raised-button color = "primary" (click) = "joinCollab()"  > Join </button>\n              <button *ngIf="checkPartOf() == true"  mat-raised-button color = "primary" (click) = "leaveCollab()" > Leave </button>\n              <button *ngIf="checkOwner() == true"   mat-raised-button color = "primary" (click) = "deleteCollab()"> Delete </button>\n              <button *ngIf="checkOwner() == true"   mat-raised-button color = "primary" (click) = "editCollab()">    Edit</button>\n            </mat-card-actions>   \n        </mat-expansion-panel>\n\n  \n\n</mat-card>'},TNEf:function(t,e){t.exports='<div class = "container">\n        <form #form = "ngForm" (ngSubmit) = "update(form.value)">\n                <br>\n                <mat-form-field>\n                <input [(ngModel)] = "collabData[\'title\']" name = "title" id = "title" type = "text" class = "form-control"\n                        #title = "ngModel" matInput placeholder = "Collab Title..." required>\n                </mat-form-field>\n                <br>\n                <mat-form-field>\n                <textarea [(ngModel)] = "collabData[\'description\']" name = "description" id = "description" type = "text" class = "form-control"\n                        #description = "ngModel" matInput placeholder = "Collab Description..." required></textarea>\n                </mat-form-field>\n                <br>\n                <mat-form-field>\n                <input [(ngModel)] = "collabData[\'location\']" name = "location" id = "location" type = "text" class = "form-control"\n                        #location = "ngModel" matInput placeholder = "Location..." required>\n                </mat-form-field>\n                <br>\n                <mat-form-field>\n                        <input [(ngModel)] = "collabData[\'size\']" name = "size" id = "size" type = "number" class = "form-control"\n                                #size = "ngModel" matInput placeholder = "Collab Size..." required>\n                </mat-form-field>\n                <mat-form-field>\n                        <input [ngModel] (ngModelChange)="collabData[\'date\'] = $event"\n                                name = "date" id="date" class = "form-control" \n                                #date = "ngModel" matInput placeholder = "Choose a date" [owlDateTimeTrigger]="dt" [owlDateTime]="dt" required>\n                        <owl-date-time #dt></owl-date-time>\n                </mat-form-field>\n                <mat-form-field>\n                        <input [ngModel] name = "duration" id = "duration"  class = "form-control"\n                                #duration = "ngModel" matInput placeholder = "Duration..." [owlDateTimeTrigger]="dt2" [owlDateTime]="dt2" required>\n                        <owl-date-time #dt2></owl-date-time>\n                </mat-form-field>\n                <mat-form-field class="example-chip-list">\n                        <mat-chip-list #chipListSkills>\n                                <mat-chip\n                                *ngFor="let skill of skills"\n                                [selectable]="selectable"\n                                [removable]="removable"\n                                (removed)="removeSkill(skill)">\n                                {{ skill }}\n                                <mat-icon matChipRemove *ngIf="removable">cancel</mat-icon>\n                                </mat-chip>\n                                <input\n                                placeholder="New Skill..."\n                                #skillInput\n                                [formControl]="skillCtrl"\n                                [matAutocomplete]="auto"\n                                [matChipInputFor]="chipListSkills"\n                                [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                                [matChipInputAddOnBlur]="addOnBlur"\n                                (matChipInputTokenEnd)="addSkill($event)">\n                                <mat-autocomplete #auto="matAutocomplete" (optionSelected)="selectedSkill($event)">\n                                        <mat-option *ngFor="let skill of filteredSkills" [value]="skill">\n                                        {{ skill }}\n                                        </mat-option>\n                                </mat-autocomplete>\n                        </mat-chip-list>             \n                </mat-form-field>\n                <br>\n                <mat-form-field class="example-chip-list">\n                        <mat-chip-list #chipListClasses>\n                                <mat-chip\n                                *ngFor = "let class of classes"\n                                [selectable] = "selectable"\n                                [removable] = "removable"\n                                (removed) = "removeClass(class)">\n                                {{ class }}\n                                <mat-icon matChipRemove *ngIf="removable">cancel</mat-icon>\n                                </mat-chip>\n                                <input \n                                placeholder="New Class..."\n                                #classInput\n                                [formControl]="classCtrl"\n                                [matAutocomplete]="auto2"\n                                [matChipInputFor]="chipListClasses"\n                                [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                                [matChipInputAddOnBlur]="addOnBlur"\n                                (matChipInputTokenEnd)="addClass($event)">\n                        <mat-autocomplete #auto2="matAutocomplete" (optionSelected)="selectedClass($event)">\n                                <mat-option *ngFor="let class of filteredClasses" [value]="class">\n                                {{ class }}\n                                </mat-option>\n                        </mat-autocomplete>\n                </mat-chip-list>\n\n                </mat-form-field>\n                <br>\n                <button mat-raised-button>Update</button>\n                <br>\n        </form>\n       \n        \n</div>'},VUYG:function(t,e){t.exports="table { \n    width: 100%; \n    border-collapse: collapse; \n  }\n  /* Zebra striping */\n  tr:nth-of-type(odd) { \n    background: #eee; \n  }\n  th { \n    background: #333; \n    color: white; \n    font-weight: bold; \n  }\n  td, th { \n    padding: 6px; \n    border: 1px solid #ccc; \n    text-align: left; \n  }\n  td a{\n    display: block;\n  \n  }"},"ct+p":function(t,e,n){"use strict";n.r(e);var a=n("mrSG"),l=n("VWX5"),i=n("4tE/"),o=n("Wf4p"),s=n("gIcY"),r=n("r43C"),c=n("/dO6"),p=n("qAlS"),u=n("BHnd"),m=n("0/Q6"),d=n("4qth"),b=n("CcnG"),h=n("oNRu"),f=n("ZYCi"),g=n("67Y/"),v=n("p0Sj"),C=function(){function t(t,e,n){this.userService=t,this.router=e,this.collabService=n,this.selected=new s.b(0),this.CACHE_KEY_0="reqCollabsCache",this.CACHE_KEY_1="activeCollabsCache",this.CACHE_KEY_2="myCollabsCache",this.userDetails()}return t.prototype.ngOnInit=function(){},t.prototype.userDetails=function(){var t=this;this.userService.getUserdetails().subscribe(function(e){t.userData=e,t.currentTab(0)})},t.prototype.userPicture=function(){this.userService.getPicture().subscribe(function(t){})},t.prototype.collabDetails=function(){this.collabService.collabDetails().subscribe(function(t){})},t.prototype.activeCollabs=function(){this.collabService.activeCollabs().subscribe(function(t){})},t.prototype.myCollabs=function(){this.collabService.myCollabs().subscribe(function(t){})},t.prototype.createCollab=function(){this.router.navigate(["/home/createcollab"])},t.prototype.currentTab=function(t){var e=this;switch(t){case 0:this.collabData=this.collabService.getReqCollabs(this.userData.classes,this.userData.skills).pipe(Object(g.a)(function(t){return t.reverse()})),this.collabData.subscribe(function(t){localStorage[e.CACHE_KEY_0]=JSON.stringify(t)}),this.collabData=this.collabData.pipe(Object(v.a)(JSON.parse(localStorage[this.CACHE_KEY_1]||"{}")));break;case 1:this.collabData=this.collabService.getCollabs("getActiveCollabs").pipe(Object(g.a)(function(t){return t.reverse()})),this.collabData.subscribe(function(t){localStorage[e.CACHE_KEY_2]=JSON.stringify(t)}),this.collabData=this.collabData.pipe(Object(v.a)(JSON.parse(localStorage[this.CACHE_KEY_0]||"{}")));break;case 2:this.collabData=this.collabService.getCollabs("getCollabDetails").pipe(Object(g.a)(function(t){return t.reverse()})),this.collabData.subscribe(function(t){localStorage[e.CACHE_KEY_1]=JSON.stringify(t)}),this.collabData=this.collabData.pipe(Object(v.a)(JSON.parse(localStorage[this.CACHE_KEY_1]||"{}")))}},t=a.c([Object(b.n)({selector:"app-home",template:n("vGtW"),styles:[n("mvbP")]}),a.f("design:paramtypes",[h.a,f.b,d.a])],t)}(),y=n("Ip0R"),x=function(){return function(){}}(),k=n("YSh2"),O=n("Gi3i"),D=n("ad02"),S=n("15JJ"),w=function(){function t(t,e,n,a){this._formBuilder=t,this.userService=e,this.collabService=n,this.router=a,this.visible=!0,this.selectable=!0,this.removable=!0,this.addOnBlur=!0,this.separatorKeysCodes=[k.g,k.c],this.skillCtrl=new s.b,this.skills=[],this.allSkills=[],this.classCtrl=new s.b,this.classes=[],this.allClasses=[],this.collabData=new x}return t.prototype.ngOnInit=function(){var t=this;this.skillCtrl.valueChanges.pipe(Object(v.a)(null),Object(O.a)(200),Object(D.a)(),Object(S.a)(function(e){return t.userService.searchSkills(e)})).subscribe(function(e){return t.filteredSkills=e.matches}),this.classCtrl.valueChanges.pipe(Object(v.a)(null),Object(O.a)(200),Object(D.a)(),Object(S.a)(function(e){return t.userService.searchClasses(e)})).subscribe(function(e){return t.filteredClasses=e.matches}),this.firstFormGroup=this._formBuilder.group({title:[this.collabData.title,s.j.required],description:[this.collabData.description,s.j.required],location:[this.collabData.location,s.j.required],size:[this.collabData.size,s.j.required],date:[this.collabData.date,s.j.required],duration:[this.collabData.duration,s.j.required]})},t.prototype.addSkill=function(t){if(!this.matAutocomplete1.isOpen){var e=t.input,n=t.value;(n||"").trim()&&this.skills.push(n.trim()),e&&(e.value=""),this.skillCtrl.setValue(null)}},t.prototype.removeSkill=function(t){var e=this.skills.indexOf(t);e>=0&&this.skills.splice(e,1)},t.prototype.selectedSkill=function(t){this.skills.push(t.option.viewValue),this.skillInput.nativeElement.value="",this.skillCtrl.setValue(null)},t.prototype.addClass=function(t){if(!this.matAutocomplete2.isOpen){var e=t.input,n=t.value;(n||"").trim()&&this.classes.push(n.trim()),e&&(e.value=""),this.classCtrl.setValue(null)}},t.prototype.removeClass=function(t){var e=this.classes.indexOf(t);e>=0&&this.classes.splice(e,1)},t.prototype.selectedClass=function(t){this.classes.push(t.option.viewValue),this.classInput.nativeElement.value="",this.classCtrl.setValue(null)},t.prototype.createCollab=function(){var t=this;this.collabData=Object.assign({},this.firstFormGroup.value),this.collabData.skills=this.skills,this.collabData.classes=this.classes,this.collabData.date=this.collabData.date.valueOf(),this.collabData.duration*=864e5,this.collabData.duration+=this.collabData.date,this.collabService.createCollab(this.collabData).subscribe(function(e){e.success&&t.router.navigate(["/home"])})},a.c([Object(b.F)(),a.f("design:type",x)],t.prototype,"currentCollab",void 0),a.c([Object(b.mb)("skillInput"),a.f("design:type",b.u)],t.prototype,"skillInput",void 0),a.c([Object(b.mb)("auto"),a.f("design:type",i.a)],t.prototype,"matAutocomplete1",void 0),a.c([Object(b.mb)("classInput"),a.f("design:type",b.u)],t.prototype,"classInput",void 0),a.c([Object(b.mb)("auto2"),a.f("design:type",i.a)],t.prototype,"matAutocomplete2",void 0),t=a.c([Object(b.n)({selector:"create-collab",template:n("dw9Y"),styles:[n("tgsL")]}),a.f("design:paramtypes",[s.a,h.a,d.a,f.b])],t)}(),I=function(){function t(t){this.userName=t,this.list=[]}return t.prototype.setKnown=function(t,e){this.list.push({nameOf:t,knows:e})},t}(),j=function(){function t(t,e,n){this.userService=t,this.collabService=e,this.router=n,this.table=[],this.xAxisReq=[],this.panelOpenState1=!1,this.panelOpenState2=!1,this.alreadyBuilt=!1,this.partOf=!1,this.isOwner=!1}return t.prototype.ngOnInit=function(){return a.b(this,void 0,void 0,function(){var t=this;return a.e(this,function(e){switch(e.label){case 0:return[4,this.userService.getUserdetails().subscribe(function(e){return t.userData=e})];case 1:return e.sent(),[2]}})})},t.prototype.makeTable=function(){return a.b(this,void 0,void 0,function(){var t,e,n,l,i,o,s,r,c;return a.e(this,function(a){switch(a.label){case 0:return this.alreadyBuilt?(this.table=[],l=void 0,t=this,[4,this.getAllRequired()]):[3,6];case 1:t.xAxisReq=a.sent(),l=this.collabData.members,e=0,n=l,a.label=2;case 2:return e<n.length?(r=n[e],[4,this.checkIfKnown(r,this.xAxisReq)]):[3,5];case 3:c=a.sent(),this.table.push(c),a.label=4;case 4:return e++,[3,2];case 5:return[3,11];case 6:return this.alreadyBuilt=!0,l=void 0,i=this,[4,this.getAllRequired()];case 7:i.xAxisReq=a.sent(),l=this.collabData.members,o=0,s=l,a.label=8;case 8:return o<s.length?(r=s[o],[4,this.checkIfKnown(r,this.xAxisReq)]):[3,11];case 9:c=a.sent(),this.table.push(c),a.label=10;case 10:return o++,[3,8];case 11:return[2]}})})},t.prototype.RefreshPage=function(){this.getAllRequired(),this.yAxisUsers=this.collabData.members},t.prototype.checkIfKnown=function(t,e){return a.b(this,void 0,void 0,function(){var n,l,i,o,s;return a.e(this,function(a){switch(a.label){case 0:n=null,n=new I(t),i=0,o=e,a.label=1;case 1:return i<o.length?(s=o[i],[4,this.userService.getUserSkillsAndClasses(t).then(function(t){l=t})]):[3,4];case 2:a.sent(),l.includes(s)?n.setKnown(s,!0):n.setKnown(s,!1),a.label=3;case 3:return i++,[3,1];case 4:return[2,n]}})})},t.prototype.getAllRequired=function(){return this.collabData.skills.concat(this.collabData.classes)},t.prototype.actionCheck=function(){return a.b(this,void 0,void 0,function(){return a.e(this,function(t){switch(t.label){case 0:return[4,this.isUserOwner()];case 1:return t.sent(),this.isPartOf(),[2]}})})},t.prototype.isUserOwner=function(){this.collabData.owner==this.userData.username?this.isOwner=!0:this.isOwner=!1},t.prototype.isPartOf=function(){for(var t=0,e=this.collabData.members;t<e.length;t++){e[t]==this.userData.username&&(this.partOf=!0)}},t.prototype.checkPartOf=function(){return this.partOf},t.prototype.checkOwner=function(){return this.isOwner},t.prototype.joinCollab=function(){var t=this;this.collabService.joinCollab(this.collabData._id).subscribe(function(e){1==e.success&&(t.partOf=!0,t.getUpdatedData())})},t.prototype.leaveCollab=function(){var t=this;this.collabService.leaveCollab(this.collabData._id).subscribe(function(e){1==e.success&&(t.partOf=!1,t.getUpdatedData())})},t.prototype.deleteCollab=function(){this.collabService.deleteCollab(this.collabData._id).subscribe(function(t){console.log(t),t&&window.location.reload()})},t.prototype.editCollab=function(){this.router.navigate(["/home/editcollab/",this.collabData._id.$oid])},t.prototype.getUpdatedData=function(){var t=this;this.collabService.getSingleCollab(this.collabData._id.$oid).subscribe(function(e){console.log(e[0],t.collabData=e[0])})},t.prototype.panelWasOpen1=function(){this.panelOpenState1=!0,this.makeTable()},t.prototype.panelWasOpen2=function(){this.panelOpenState2=!0,this.actionCheck()},a.c([Object(b.F)(),a.f("design:type",x)],t.prototype,"collabData",void 0),t=a.c([Object(b.n)({selector:"collab-card",template:n("LP+A"),styles:[n("1ljd")]}),a.f("design:paramtypes",[h.a,d.a,f.b])],t)}(),A=function(){function t(t,e,n,a){var l=this;this.userService=t,this.collabService=e,this.activeRoute=n,this.router=a,this.visible=!0,this.selectable=!0,this.removable=!0,this.addOnBlur=!0,this.separatorKeysCodes=[k.g,k.c],this.skillCtrl=new s.b,this.skills=[],this.allSkills=[],this.classCtrl=new s.b,this.classes=[],this.allClasses=[],this.collabData=new x,this.activeRoute.paramMap.subscribe(function(t){l._id=t.get("_id")})}return t.prototype.ngOnInit=function(){return a.b(this,void 0,void 0,function(){var t=this;return a.e(this,function(e){switch(e.label){case 0:return[4,this.getCollabDetails(this._id)];case 1:return e.sent(),this.skillCtrl.valueChanges.pipe(Object(v.a)(null),Object(O.a)(200),Object(D.a)(),Object(S.a)(function(e){return t.userService.searchSkills(e)})).subscribe(function(e){return t.filteredSkills=e.matches}),this.classCtrl.valueChanges.pipe(Object(v.a)(null),Object(O.a)(200),Object(D.a)(),Object(S.a)(function(e){return t.userService.searchClasses(e)})).subscribe(function(e){return t.filteredClasses=e.matches}),[2]}})})},t.prototype.getCollabDetails=function(t){var e=this;this.collabService.getSingleCollab(t).subscribe(function(t){e.collabData=t[0],e.skills=t[0].skills,e.classes=t[0].classes})},t.prototype.update=function(t){return a.b(this,void 0,void 0,function(){var e=this;return a.e(this,function(n){switch(n.label){case 0:return this.collabData=t,this.collabData.skills=this.skills,this.collabData.classes=this.classes,this.collabData._id=this._id,[4,this.collabService.editCollab(this.collabData,this._id).subscribe(function(t){t.success?e.router.navigate(["/home"]):console.error(t)})];case 1:return n.sent(),[2]}})})},t.prototype.addSkill=function(t){if(!this.matAutocomplete1.isOpen){var e=t.input,n=t.value;(n||"").trim()&&this.skills.push(n.trim()),e&&(e.value=""),this.skillCtrl.setValue(null)}},t.prototype.removeSkill=function(t){var e=this.skills.indexOf(t);e>=0&&this.skills.splice(e,1)},t.prototype.selectedSkill=function(t){this.skills.push(t.option.viewValue),this.skillInput.nativeElement.value="",this.skillCtrl.setValue(null)},t.prototype.addClass=function(t){if(!this.matAutocomplete2.isOpen){var e=t.input,n=t.value;(n||"").trim()&&this.classes.push(n.trim()),e&&(e.value=""),this.classCtrl.setValue(null)}},t.prototype.removeClass=function(t){var e=this.classes.indexOf(t);e>=0&&this.classes.splice(e,1)},t.prototype.selectedClass=function(t){this.classes.push(t.option.viewValue),this.classInput.nativeElement.value="",this.classCtrl.setValue(null)},a.c([Object(b.F)(),a.f("design:type",x)],t.prototype,"currentCollab",void 0),a.c([Object(b.mb)("skillInput"),a.f("design:type",b.u)],t.prototype,"skillInput",void 0),a.c([Object(b.mb)("auto"),a.f("design:type",i.a)],t.prototype,"matAutocomplete1",void 0),a.c([Object(b.mb)("classInput"),a.f("design:type",b.u)],t.prototype,"classInput",void 0),a.c([Object(b.mb)("auto2"),a.f("design:type",i.a)],t.prototype,"matAutocomplete2",void 0),t=a.c([Object(b.n)({selector:"app-edit-collab",template:n("TNEf"),styles:[n("xcjR")]}),a.f("design:paramtypes",[h.a,d.a,f.a,f.b])],t)}(),q=[{path:"",component:C},{path:"collabinfo",component:j},{path:"createcollab",component:w},{path:"editcollab/:_id",component:A}],F=function(){function t(){}return t=a.c([Object(b.K)({imports:[f.c.forChild(q)],exports:[f.c]})],t)}(),_=n("UodH"),E=n("FVSy"),T=n("SMsm"),N=n("La40"),R=n("jlZm"),K=n("wmQ5"),M=n("uGex"),L=function(){function t(t,e){this.router=t,this.userservice=e,this.table=[],this.xAxisReq=[],this.displayNames=new Map}return t.prototype.ngOnInit=function(){},t.prototype.goToProfile=function(t){this.router.navigate(["/user/",t])},t.prototype.getUserDispname=function(t){var e=this;return this.displayNames.has(t)?this.displayNames.get(t):(this.displayNames.set(t,""),setTimeout(function(){e.userservice.getMemberdetails(t).subscribe(function(n){e.displayNames.set(t,n.name)})}),this.displayNames.get(t))},a.c([Object(b.F)(),a.f("design:type",Array)],t.prototype,"table",void 0),a.c([Object(b.F)("xAxisReq"),a.f("design:type",Array)],t.prototype,"xAxisReq",void 0),t=a.c([Object(b.n)({selector:"collab-table",template:n("g5PM"),styles:[n("VUYG")]}),a.f("design:paramtypes",[f.b,h.a])],t)}(),P=n("seP3"),B=n("b716"),Y=n("jQLj");n.d(e,"HomeModule",function(){return V});var V=function(){function t(){}return t=a.c([Object(b.K)({declarations:[C,j,L,w,A],imports:[y.b,F,N.a,E.a,T.a,_.a,m.a,R.a,u.a,p.b,c.a,r.a,K.a,P.c,B.b,Y.a,o.j,i.b,P.c,M.a,l.a,l.b,s.d,s.i]})],t)}()},dw9Y:function(t,e){t.exports='\x3c!-- Steppers --\x3e\n<div class = "container">\n        <mat-vertical-stepper [linear] = "true" #stepper>\n    \n                <mat-step [stepControl] = "firstFormGroup">\n                    <form [formGroup] = "firstFormGroup">\n                        <ng-template matStepLabel >Fill in Collab Info</ng-template>\n                        <mat-form-field>\n                            <input matInput placeholder = "Collab Title..." formControlName = "title" required>\n                        </mat-form-field>\n                        <mat-form-field>\n                            <textarea matInput placeholder = "Description..." formControlName = "description" required></textarea>\n                        </mat-form-field>\n                        <mat-form-field>\n                                <input matInput placeholder = "Location..." formControlName = "location" required>\n                        </mat-form-field>\n                        <mat-form-field>\n                                <input type = "number" min="2"  matInput placeholder = "Collab Size..." formControlName = "size" required>\n                        </mat-form-field>\n                        <mat-form-field>\n                                <input formControlName = "date" matInput [owlDateTimeTrigger]="dt" placeholder = "Choose a date" [owlDateTime]="dt" required>\n                                <owl-date-time #dt></owl-date-time>\n                        </mat-form-field>\n                        <mat-form-field>\n                                <input type = "number" min="2"  matInput placeholder = "Duration..." formControlName = "duration" required>\n                        </mat-form-field>\n                    </form>\n                </mat-step>\n                <mat-step [stepControl] = "secondFormGroup" >\n                    <ng-template matStepLabel>Add Classes and Skills</ng-template>\n                    <div>\n                        <mat-form-field class="example-chip-list">\n                            <mat-chip-list #chipListSkills>\n                                <mat-chip\n                                    *ngFor="let skill of skills"\n                                    [selectable]="selectable"\n                                    [removable]="removable"\n                                    (removed)="removeSkill(skill)">\n                                    {{ skill }}\n                                    <mat-icon matChipRemove *ngIf="removable">cancel</mat-icon>\n                                </mat-chip>\n                                <input\n                                    placeholder="New Skill..."\n                                    #skillInput\n                                    [formControl]="skillCtrl"\n                                    [matAutocomplete]="auto"\n                                    [matChipInputFor]="chipListSkills"\n                                    [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                                    [matChipInputAddOnBlur]="addOnBlur"\n                                    (matChipInputTokenEnd)="addSkill($event)">\n                                    <mat-autocomplete #auto="matAutocomplete" (optionSelected)="selectedSkill($event)">\n                                        <mat-option *ngFor="let skill of filteredSkills" [value]="skill">\n                                            {{ skill }}\n                                        </mat-option>\n                                    </mat-autocomplete>\n                            </mat-chip-list>\n                                    \n                        </mat-form-field>\n                        <mat-form-field class="example-chip-list">\n                            <mat-chip-list #chipListClasses>\n                                <mat-chip\n                                    *ngFor = "let class of classes"\n                                    [selectable] = "selectable"\n                                    [removable] = "removable"\n                                    (removed) = "removeClass(class)">\n                                    {{ class }}\n                                    <mat-icon matChipRemove *ngIf="removable">cancel</mat-icon>\n                                </mat-chip>\n                                <input \n                                    placeholder="New Class..."\n                                    #classInput\n                                    [formControl]="classCtrl"\n                                    [matAutocomplete]="auto2"\n                                    [matChipInputFor]="chipListClasses"\n                                    [matChipInputSeparatorKeyCodes]="separatorKeysCodes"\n                                    [matChipInputAddOnBlur]="addOnBlur"\n                                    (matChipInputTokenEnd)="addClass($event)">\n                                    <mat-autocomplete #auto2="matAutocomplete" (optionSelected)="selectedClass($event)">\n                                        <mat-option *ngFor="let class of filteredClasses" [value]="class">\n                                            {{ class }}\n                                        </mat-option>\n                                    </mat-autocomplete>\n                            </mat-chip-list>\n\n                        </mat-form-field>\n                    </div>\n                </mat-step>\n                <mat-step>\n                    <ng-template matStepLabel> Confirm Your Information</ng-template>\n                    <div>\n                        <button mat-raised-button (click) = "createCollab()" color="primary">Done</button>\n                    </div>\n                </mat-step>\n            \n        </mat-vertical-stepper>\n    </div>'},g5PM:function(t,e){t.exports='\n<table>\n    <tr *ngFor = "let row of table">\n      <td>\n        <button mat-button color= "primary" (click) = "goToProfile(row.userName)">{{ getUserDispname(row.userName) }}</button>\n      </td>\n      <td *ngFor = "let req of row.list" [style.background-color] = "req.knows ? \'#ccffcc\' : \'#ffcccc\'"> {{ req.nameOf }} </td>\n    </tr>\n</table>'},mvbP:function(t,e){t.exports="p {\n    padding: 16px;\n    text-align: center;\n  \n  }\n\n  .collab {\n    margin-top:25px;\n    margin-bottom: 30px;\n  }\n\n  .add-collab-button {\n    z-index: 5; \n    position: fixed; \n    display: flex;\n    align-self: flex-end; \n    bottom: 7%; \n    margin-bottom: 5px;\n    margin-left: 80%; \n  }\n\n  \n\n  "},tgsL:function(t,e){t.exports=".mat-form-field{\n    width: 70%;\n    margin-top: 10px;\n}\n\n.container {\n    margin-top: 50px;\n    margin-bottom: 50px;\n    margin-left: 10%;\n    margin-right: 10%;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n\n}\n\n.example-chip-list {\n    width: 100%;\n  }"},vGtW:function(t,e){t.exports='   \x3c!--\n     selected.value: Is a value from .ts file.\n     selectedIndex: DOM value\n   --\x3e\n   <mat-tab-group [selectedIndex] = "selected.value" \n                  (selectedIndexChange) ="currentTab($event)" mat-align-tabs="center">\n\n      <mat-tab label="Recommended">\n        <ng-template matTabContent>\n          <ng-container *ngFor = "let collab of collabData | async">\n            <div class ="collab">\n                \x3c!-- Property binding from component to component using @Input() and @Output --\x3e\n                <collab-card [collabData] = "collab"></collab-card>\n            </div>      \n          </ng-container>\n        </ng-template>\n      </mat-tab>\n\n      <mat-tab label="All Collaborations">\n        <ng-template matTabContent>\n          <ng-container *ngFor = "let collab of collabData | async">\n            <div class ="collab">\n                \x3c!-- Property binding from component to component using @Input() and @Output --\x3e\n                <collab-card [collabData] = "collab"></collab-card>\n            </div>      \n          </ng-container>\n        </ng-template>\n      </mat-tab>\n\n      <mat-tab label="My Collabs">\n        <ng-template matTabContent>\n            <ng-container *ngFor = "let collab of collabData | async">\n              <div class ="collab">\n                \x3c!-- Property binding from component to component using @Input() and @Output --\x3e\n                <collab-card [collabData] = "collab"></collab-card>\n              </div>      \n            </ng-container>\n        </ng-template>\n      </mat-tab>\n\n\n\n   </mat-tab-group>\n\n   <div class = "add-collab-button">\n     <a mat-fab color = "primary" (click) = "createCollab()" style="margin-right: 14px">\n      <mat-icon>add</mat-icon>\n     </a>\n   </div>\n     \n          \n            \n'},xcjR:function(t,e){t.exports=".mat-form-field {\n    width: 90%;\n    margin-left: 15px;\n}\n\n.example-chip-list .mat-autocomplete{\n    width: 90%;\n}\n\n.container {\n    margin-top: 50px;\n    margin-bottom: 50px;\n    margin-left: 10%;\n    margin-right: 10%;\n    box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);\n}\n\nexample-chip-list {\n    width: 100%;\n  }\n\n"}}]);